===========================
How to Use 4-print_square.py
============================

This module defines a square-printing function ``def print_square(size)``.

Usage
=====

Squares are printed using the ``#`` character. The argument ``size`` represents the 
height and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####
    
::

    >>> print_square(6)
    ######
    ######
    ######
    ######
    ######
    ######

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

if ``size`` is zero, the function prints nothing.

::

    print_square(0)

::

Invalid Sizes
=============

The parameter ``size`` must be an integer. Otherwise, TypeError is raised

::

    >>> print_square("boss")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(3.4)
    Traceback (most recent call last):
    TypeError: size must be an integer

If ``size`` is less than zero, ValueError is raised.

::

    >>> print_square(-3)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Note that type-checking is done before value-checking.

::

    >>> print_square(-6.7)
    Traceback (most recent call last):
    TypeError: size must be an integer